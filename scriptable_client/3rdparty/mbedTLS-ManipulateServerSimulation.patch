--- a/include/mbedtls/ssl.h	2021-07-01 09:46:44.609579000 +0200
+++ b/include/mbedtls/ssl.h	2021-07-01 15:20:12.541704000 +0200
@@ -28,6 +28,7 @@
 #include MBEDTLS_CONFIG_FILE
 #endif
 
+#include <unistd.h>
 #include "mbedtls/bignum.h"
 #include "mbedtls/ecp.h"
 
@@ -1202,6 +1203,8 @@
     unsigned int overwrite_pms_random : 1; /*!< overwrite the PreMasterSecret.random? */
     unsigned int overwrite_pms_random_byte : 1; /*!< overwrite the given PreMasterSecret.random byte with zero? */
     uint16_t pms_random_byte_index; /*!< indicate which byte of the random will be set to zero */
+    uint16_t server_simulation_id; /*!< indicate if and which server will be simulated */
+    useconds_t server_simulation_delay; /*!< indicate the amount of delay to simulate in microseconds */
 };
 
 struct mbedtls_ssl_context
--- a/library/ssl_msg.c	2021-06-28 06:35:43.930437000 +0200
+++ b/library/ssl_msg.c	2021-07-01 15:08:30.744979000 +0200
@@ -4823,9 +4823,44 @@
 #if defined(MBEDTLS_SSL_ALL_ALERT_MESSAGES)
                     if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
                     {
-                        mbedtls_ssl_send_alert_message( ssl,
-                                MBEDTLS_SSL_ALERT_LEVEL_FATAL,
-                                MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
+		         if ( ( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER ) &&
+		             ( ssl->conf->server_simulation_id == 1 ) )
+	                {
+	                     MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server Cisco ACE" ) );
+	                     mbedtls_ssl_send_alert_message( ssl,
+	                            MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+	                            MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
+	                }
+	                else if ( ( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER ) &&
+	                     ( ssl->conf->server_simulation_id == 4 ) )
+	                {
+	                     MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server PAN OS" ) );
+	                     mbedtls_ssl_send_alert_message( ssl,
+	                            MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+	                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+	                }
+	                else if ( ( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER ) &&
+	                          ( ssl->conf->server_simulation_id == 5 ) )
+	                {
+	                     MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server Netscaler GCM" ) );
+	                     mbedtls_ssl_send_alert_message( ssl,
+	                            MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+	                            MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR );
+	                }
+	                else if ( ( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER ) &&
+	                          ( ssl->conf->server_simulation_id == 6 ) )
+	                {
+	                     MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond with a server Delay" ) );
+	                     mbedtls_ssl_send_alert_message( ssl,
+	                            MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+	                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+	                }
+	                else
+	                {
+	                     mbedtls_ssl_send_alert_message( ssl,
+	                            MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+	                            MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC );
+	                }
                     }
 #endif
                     return( ret );
--- a/library/ssl_srv.c	2021-06-28 06:35:43.930437000 +0200
+++ b/library/ssl_srv.c	2021-07-01 15:04:25.437973000 +0200
@@ -3912,6 +3912,65 @@
     ret = mbedtls_pk_decrypt( private_key, p, len,
                               peer_pms, peer_pmslen, peer_pmssize,
                               ssl->conf->f_rng, ssl->conf->p_rng );
+                         
+    if ( ret != 0 )
+    {
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "invalid PKCS#1 v1.5 padding detected!" ) );
+
+        // Respond to the invalid padding now depending on the server simulation ID
+       if ( ssl->conf->server_simulation_id ==  1)
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server CISCO ACE" ) );
+            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+        if ( ssl->conf->server_simulation_id == 2 )
+       {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server Facebook v2" ) );
+            // Change the state so that the server does not try to receive the
+            // ChangeCipherSpec and Finished message.
+            ssl->state = MBEDTLS_SSL_HANDSHAKE_OVER;
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+        if ( ssl->conf->server_simulation_id == 3 )
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server F5 v1" ) );
+            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+        if ( ssl->conf->server_simulation_id == 4 )
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server PAN OS" ) );
+            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+           mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                        MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+        if ( ssl->conf->server_simulation_id == 5 )
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond like the server Netscaler GCM" ) );
+            // Provoke timeout on the peer's side
+            usleep( 200000 ); // wait for 200 ms
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+        if ( ssl->conf->server_simulation_id == 6 )
+        {
+            MBEDTLS_SSL_DEBUG_MSG( 2, ( "respond with a server Delay" ) );
+            // Provoke delay on the server side
+            usleep( ssl->conf->server_simulation_delay ); // wait for the specified microseconds
+            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
+                                       MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
+            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
+        }
+    }
+    else
+    {
+        MBEDTLS_SSL_DEBUG_MSG( 2, ( "valid PKCS#1 v1.5 padding detected" ) );
+    }    
+                              
     return( ret );
 }
 
