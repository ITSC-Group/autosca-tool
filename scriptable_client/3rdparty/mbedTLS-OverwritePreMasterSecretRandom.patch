--- a/include/mbedtls/ssl.h	2021-07-01 09:44:24.270061000 +0200
+++ b/include/mbedtls/ssl.h	2021-07-01 09:46:44.609579179 +0200
@@ -1199,6 +1199,9 @@
 
     unsigned int overwrite_pms_version : 1; /*!< overwrite the PreMasterSecret.client_version? */
     unsigned char pms_version[2]; /*!< value for overwriting PreMasterSecret.client_version */
+    unsigned int overwrite_pms_random : 1; /*!< overwrite the PreMasterSecret.random? */
+    unsigned int overwrite_pms_random_byte : 1; /*!< overwrite the given PreMasterSecret.random byte with zero? */
+    uint16_t pms_random_byte_index; /*!< indicate which byte of the random will be set to zero */
 };
 
 struct mbedtls_ssl_context
--- a/library/ssl_cli.c	2021-07-01 08:43:53.065172000 +0200
+++ b/library/ssl_cli.c	2021-07-01 09:51:40.528210030 +0200
@@ -2845,6 +2845,8 @@
     size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
     unsigned char *p = ssl->handshake->premaster + pms_offset;
     mbedtls_pk_context * peer_pk;
+    int i;
+    unsigned char p_overwrite[48];
 
     if( offset + len_bytes > MBEDTLS_SSL_OUT_CONTENT_LEN )
     {
@@ -2879,6 +2881,37 @@
         return( ret );
     }
 
+    MBEDTLS_SSL_DEBUG_BUF( 3, "pre-master secret, original random", p + 2, 46 );
+
+    // copy original pre-master secret
+    memcpy( p_overwrite, p, 48 );
+
+    if ( ssl->conf->overwrite_pms_random != 0 )
+    {
+	// set seed dependent from the first byte of the original random bytes
+	srand(p[3]);
+
+	// generate new random bytes without zero bytes, the first two bytes with the client version remain unchanged
+	for( i = 0; i < 46; i++ )
+	{
+		p_overwrite[i + 2] = (unsigned char)((rand() % 255) + 1);
+	}
+    }
+
+    if ( ssl->conf->overwrite_pms_random_byte != 0 )
+    {
+	if ( ssl->conf->pms_random_byte_index < 46 )
+	{
+		// Set the random byte with the given index to zero.
+		p_overwrite[2 + ssl->conf->pms_random_byte_index] = 0;
+	}
+    }
+
+    if ( ssl->conf->overwrite_pms_random != 0 || ssl->conf->overwrite_pms_random_byte != 0 )
+    {
+	MBEDTLS_SSL_DEBUG_BUF( 3, "pre-master secret, manipulated random", p_overwrite + 2, 46 );
+    }
+
     ssl->handshake->pmslen = 48;
 
 #if !defined(MBEDTLS_SSL_KEEP_PEER_CERTIFICATE)
@@ -2903,7 +2936,7 @@
     }
 
     if( ( ret = mbedtls_pk_encrypt( peer_pk,
-                            p, ssl->handshake->pmslen,
+                            p_overwrite, ssl->handshake->pmslen,
                             ssl->out_msg + offset + len_bytes, olen,
                             MBEDTLS_SSL_OUT_CONTENT_LEN - offset - len_bytes,
                             ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
